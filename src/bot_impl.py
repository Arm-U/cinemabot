from aiogram import types  # type: ignore
import typing as tp
from .helper_classes import Film, LogItem
from .film_search import FilmSearch
from .database import DataBase
from datetime import datetime


start_text: str = """
–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç "–ö–∏–Ω–æ –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ"! üé¨

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–µ–±—è –∫–∏–Ω–æ–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è,
 –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π /help.
 –£–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçøüé•
"""
help_text: str = """
üé• –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ "–ö–∏–Ω–æ –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ" üåÜ:

/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
/history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞.
/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.

–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
 –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∏–Ω–æ –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ! üçøüé¨
"""
search_text = """
üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {}

üì∫ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {}

–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º! üçøüé•
"""


class TelegramBot:
    def __init__(self, db: DataBase):
        self.search_engine = FilmSearch()
        self.db = db

    async def start_message(self, message: types.Message):
        await message.answer(start_text)

    async def help_message(self, message: types.Message):
        await message.answer(help_text)

    async def history_message(self, message: types.Message):
        res: tp.List[LogItem] = self.db.get_history(message.chat.id)
        text_list = [f'‚è∞ {log.search_time} --- {log.name}' for log in res]
        text = '\n'.join(text_list)
        if text == '':
            text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏'
        text = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n' + text
        await message.answer(text)

    async def stats_message(self, message: types.Message):
        res: tp.List[tp.Any] = self.db.get_stats(message.chat.id)
        text_list = [f'üé• {log[0]} --- {log[1]} –∑–∞–ø—Ä–æ—Å–æ–≤' for log in res]
        text = '\n'.join(text_list)
        if text == '':
            text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏'
        text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:\n' + text
        await message.answer(text)

    async def search_message(self, message: types.Message):
        film: tp.Optional[Film] = await self.search_engine.search_film(message)
        if not film:
            await message.answer(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å'
            )
        else:
            text = search_text.format(
                film.name, film.rating, film.description, film.link
            )
            log = LogItem(message.chat.id, film.name, datetime.now())
            self.db.insert_log(log)
            await message.answer_photo(photo=film.poster, caption=text)
